// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");

var input = Fs.readFileSync("input/Week1/Year2020Day3.sample.txt", "utf8");

var pattern = [[
    3,
    1
  ]];

var dataArray = Belt_Array.map(input.split("\n"), (function (val) {
        return val.split("");
      }));

function part1(array, x, y) {
  var result = {
    column: 0,
    row: 0,
    trees: 0
  };
  while(result.row < array.length) {
    var columnUnit = Caml_int32.mod_(result.column, Caml_array.get(array, 0).length);
    var point = Caml_array.get(Caml_array.get(array, result.row), columnUnit);
    console.log([
          result.row,
          columnUnit
        ]);
    if (point === "#") {
      result.trees = result.trees + 1 | 0;
    }
    result.column = result.column + x | 0;
    result.row = result.row + y | 0;
  };
  return result.trees;
}

console.log(part1(dataArray, 3, 1));

function part2(array, slopes) {
  return Belt_Array.reduce(Belt_Array.map(slopes, (function (val) {
                    return part1(array, Caml_array.get(val, 0), Caml_array.get(val, 1));
                  })), 1.0, (function (prev, current) {
                return prev * current;
              }));
}

exports.input = input;
exports.pattern = pattern;
exports.dataArray = dataArray;
exports.part1 = part1;
exports.part2 = part2;
/* input Not a pure module */
