// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");

var input = Fs.readFileSync("../../input/Week1/Year2020Day4.sample.txt", "utf8");

function parsePassport(input) {
  var passport = function (d) {
    var byr = Belt_MapString.get(d, "byr");
    var iyr = Belt_MapString.get(d, "iyr");
    var eyr = Belt_MapString.get(d, "eyr");
    var hgt = Belt_MapString.get(d, "hgt");
    var hcl = Belt_MapString.get(d, "hcl");
    var ecl = Belt_MapString.get(d, "ecl");
    var pid = Belt_MapString.get(d, "pid");
    var cid = Belt_MapString.get(d, "cid");
    if (byr !== undefined && iyr !== undefined && eyr !== undefined && hgt !== undefined && hcl !== undefined && ecl !== undefined && pid !== undefined) {
      return {
              byr: byr,
              iyr: iyr,
              eyr: eyr,
              hgt: hgt,
              hcl: hcl,
              ecl: ecl,
              pid: pid,
              cid: cid
            };
    }
    
  };
  return Belt_Array.keepMap(Belt_Array.map(Belt_Array.map(Belt_Array.map(Belt_Array.map(Belt_Array.map(input.split("\r\n\r\n"), (function (v) {
                                    return Belt_Array.keepMap(v.split(/\s/), (function (v) {
                                                  return v;
                                                }));
                                  })), (function (v) {
                                return Belt_Array.map(v, (function (x) {
                                              return x.split(":");
                                            }));
                              })), (function (v) {
                            return Belt_Array.keepMap(Belt_Array.map(v, (function (x) {
                                              var match = Belt_Array.get(x, 0);
                                              var match$1 = Belt_Array.get(x, 1);
                                              if (match !== undefined && match$1 !== undefined) {
                                                return [
                                                        Caml_option.valFromOption(match),
                                                        Caml_option.valFromOption(match$1)
                                                      ];
                                              }
                                              
                                            })), (function (v) {
                                          return v;
                                        }));
                          })), Belt_MapString.fromArray), passport), (function (v) {
                return v;
              }));
}

function countPassport(d) {
  return d.length;
}

function parsePassport2(input) {
  var split = function (d) {
    var splitSpace = function (data) {
      return Belt_Array.keepMap(data.split(/\s/), (function (v) {
                    return v;
                  }));
    };
    var splitValue = function (data) {
      return data.split(":");
    };
    return Belt_Array.map(Belt_Array.map(d.split("\r\n\r\n"), splitSpace), (function (x) {
                  return Belt_Array.map(x, splitValue);
                }));
  };
  var arrToPair = function (d) {
    var match = Belt_Array.get(d, 0);
    var match$1 = Belt_Array.get(d, 1);
    if (match !== undefined && match$1 !== undefined) {
      return [
              Caml_option.valFromOption(match),
              Caml_option.valFromOption(match$1)
            ];
    }
    
  };
  var pairArrToMap = Belt_MapString.fromArray;
  var range = function (num, min, max) {
    var match = Caml_obj.caml_greaterequal(num, min);
    var match$1 = Caml_obj.caml_lessequal(num, max);
    if (match && match$1) {
      return Caml_option.some(num);
    }
    
  };
  var parseHeight = function (str) {
    var stringToHeight = function (str) {
      var unit = str.slice(-2);
      var value = Belt_Int.fromString(str.slice(0, -2));
      switch (unit) {
        case "cm" :
            if (value !== undefined) {
              return {
                      TAG: /* Cm */0,
                      _0: value
                    };
            } else {
              return ;
            }
        case "in" :
            if (value !== undefined) {
              return {
                      TAG: /* In */1,
                      _0: value
                    };
            } else {
              return ;
            }
        default:
          return ;
      }
    };
    var parseValueByUnit = function (hgt) {
      if (hgt.TAG === /* Cm */0) {
        return Belt_Option.map(range(hgt._0, 150, 193), (function (x) {
                      return {
                              TAG: /* Cm */0,
                              _0: x
                            };
                    }));
      } else {
        return Belt_Option.map(range(hgt._0, 59, 76), (function (x) {
                      return {
                              TAG: /* In */1,
                              _0: x
                            };
                    }));
      }
    };
    return Belt_Option.flatMap(stringToHeight(str), parseValueByUnit);
  };
  var parseHairColor = function (str) {
    var rule = /^#[a-z0-9+]{6}$/;
    if (rule.test(str)) {
      return str;
    }
    
  };
  var parseEyeColor = function (str) {
    switch (str) {
      case "amb" :
          return /* Amb */0;
      case "blu" :
          return /* Blu */1;
      case "brn" :
          return /* Brn */2;
      case "grn" :
          return /* Grn */4;
      case "gry" :
          return /* Gry */3;
      case "hzl" :
          return /* Hzl */5;
      case "oth" :
          return /* Oth */6;
      default:
        return ;
    }
  };
  var parsePassportId = function (str) {
    var rule = /^0*[0-9+]{9}$/;
    if (rule.test(str)) {
      return str;
    }
    
  };
  var mapToPassport2 = function (d) {
    var byr = Belt_Option.flatMap(Belt_Option.flatMap(Belt_MapString.get(d, "byr"), Belt_Int.fromString), (function (x) {
            return range(x, 1920, 2002);
          }));
    var iyr = Belt_Option.flatMap(Belt_Option.flatMap(Belt_MapString.get(d, "iyr"), Belt_Int.fromString), (function (x) {
            return range(x, 2010, 2020);
          }));
    var eyr = Belt_Option.flatMap(Belt_Option.flatMap(Belt_MapString.get(d, "eyr"), Belt_Int.fromString), (function (x) {
            return range(x, 2020, 2030);
          }));
    var hgt = Belt_Option.flatMap(Belt_MapString.get(d, "hgt"), parseHeight);
    var hcl = Belt_Option.flatMap(Belt_MapString.get(d, "hcl"), parseHairColor);
    var ecl = Belt_Option.flatMap(Belt_MapString.get(d, "ecl"), parseEyeColor);
    var pid = Belt_Option.flatMap(Belt_MapString.get(d, "pid"), parsePassportId);
    var cid = Belt_MapString.get(d, "cid");
    if (byr !== undefined && iyr !== undefined && eyr !== undefined && hgt !== undefined && hcl !== undefined && ecl !== undefined && pid !== undefined) {
      return {
              byr: byr,
              iyr: iyr,
              eyr: eyr,
              hgt: hgt,
              hcl: hcl,
              ecl: ecl,
              pid: pid,
              cid: cid
            };
    }
    
  };
  return Belt_Array.map(Belt_Array.map(Belt_Array.map(Belt_Array.map(split(input), (function (x) {
                            return Belt_Array.map(x, arrToPair);
                          })), (function (xs) {
                        if (Belt_Array.some(xs, Belt_Option.isSome)) {
                          return Belt_Array.keepMap(xs, (function (x) {
                                        return x;
                                      }));
                        }
                        
                      })), (function (x) {
                    return Belt_Option.map(x, pairArrToMap);
                  })), (function (x) {
                return Belt_Option.flatMap(x, mapToPassport2);
              }));
}

console.log(parsePassport(input).length);

console.log(parsePassport2(input).length);

exports.input = input;
exports.parsePassport = parsePassport;
exports.countPassport = countPassport;
exports.parsePassport2 = parsePassport2;
/* input Not a pure module */
