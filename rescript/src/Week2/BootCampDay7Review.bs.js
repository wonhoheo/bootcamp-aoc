// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Range = require("rescript/lib/js/belt_Range.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");

var text = Fs.readFileSync("input/Week2/Year2020Day4.sample.txt", "utf8");

function stringToEcl(str) {
  switch (str) {
    case "amb" :
        return /* Amb */0;
    case "blu" :
        return /* Blu */1;
    default:
      return ;
  }
}

function countPassport(arr) {
  return Belt_Array.reduce(Belt_Array.map(arr, Belt_Option.isSome), 0, (function (total, curr) {
                return total + (
                        curr ? 1 : 0
                      ) | 0;
              }));
}

function checkPassport(passport) {
  if (passport === undefined) {
    return ;
  }
  var fieldDefinitions = {
    hgt: /^(?:(?:1[5-9][0-9]|19[0-3])cm|(?:59|6[0-9]|7[0-6])in)$/,
    hcl: /^#[0-9a-f]{6}$/,
    ecl: /^(?:amb|blu|brn|gry|grn|hzl|oth)$/,
    pid: /^\d{9}$/
  };
  var byr = Belt_Range.some(1920, 2002, (function (i) {
          return i === passport.byr;
        }));
  var iyr = Belt_Range.some(2010, 2020, (function (i) {
          return i === passport.iyr;
        }));
  var eyr = Belt_Range.some(2020, 2030, (function (i) {
          return i === passport.eyr;
        }));
  var hgt = fieldDefinitions.hgt.test(passport.hgt);
  var hcl = fieldDefinitions.hcl.test(passport.hcl);
  var ecl = fieldDefinitions.ecl.test(passport.ecl);
  var pid = fieldDefinitions.pid.test(passport.pid);
  if (Belt_Array.every([
          byr,
          iyr,
          eyr,
          hgt,
          hcl,
          ecl,
          pid
        ], (function (x) {
            return x === true;
          }))) {
    return passport;
  }
  
}

function makePassport(tuple) {
  var byr = Belt_Option.flatMap(Belt_MapString.get(tuple, "byr"), Belt_Int.fromString);
  var iyr = Belt_Option.flatMap(Belt_MapString.get(tuple, "iyr"), Belt_Int.fromString);
  var eyr = Belt_Option.flatMap(Belt_MapString.get(tuple, "eyr"), Belt_Int.fromString);
  var hgt = Belt_MapString.get(tuple, "hgt");
  var hcl = Belt_MapString.get(tuple, "hcl");
  var ecl = Belt_MapString.get(tuple, "ecl");
  var pid = Belt_MapString.get(tuple, "pid");
  var cid = Belt_MapString.get(tuple, "cid");
  if (byr !== undefined && iyr !== undefined && eyr !== undefined && hgt !== undefined && hcl !== undefined && ecl !== undefined && pid !== undefined) {
    return {
            byr: byr,
            iyr: iyr,
            eyr: eyr,
            hgt: hgt,
            hcl: hcl,
            ecl: ecl,
            pid: pid,
            cid: cid
          };
  }
  
}

function convertTuple(arr) {
  return Belt_MapString.fromArray(Belt_Array.keepMap(Belt_Array.map(arr, (function (x) {
                        var match = Belt_Array.get(x, 0);
                        var match$1 = Belt_Array.get(x, 1);
                        if (match !== undefined && match$1 !== undefined) {
                          return [
                                  match,
                                  match$1
                                ];
                        }
                        
                      })), (function (x) {
                    return x;
                  })));
}

function parsePassport(arr) {
  return Belt_Array.map(arr, (function (array) {
                return makePassport(convertTuple(array));
              }));
}

function convertArray(input) {
  return Belt_Array.map(input.split("\n\n"), (function (str) {
                return Belt_Array.map(str.replace(/\n/g, " ").split(" "), (function (str) {
                              return str.split(":");
                            }));
              }));
}

function part1(input) {
  return countPassport(parsePassport(convertArray(input)));
}

function part2(input) {
  return countPassport(Belt_Array.map(parsePassport(convertArray(input)), checkPassport));
}

console.log(countPassport(parsePassport(convertArray(text))));

console.log(part2(text));

exports.text = text;
exports.stringToEcl = stringToEcl;
exports.countPassport = countPassport;
exports.checkPassport = checkPassport;
exports.makePassport = makePassport;
exports.convertTuple = convertTuple;
exports.parsePassport = parsePassport;
exports.convertArray = convertArray;
exports.part1 = part1;
exports.part2 = part2;
/* text Not a pure module */
