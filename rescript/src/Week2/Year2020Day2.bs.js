// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input/Week2/Year2020Day2.sample.txt", "utf8");

function strToArray(str) {
  var reg = /\:/gi;
  var x1 = Belt_Array.map(str.split("\n"), (function (val) {
          return val.split(" ");
        }));
  return Belt_Array.map(x1, (function (x) {
                return Belt_Array.map(x, (function (y) {
                              return y.replace(reg, "");
                            }));
              }));
}

function convertContains(v) {
  var x1 = Belt_Array.map(v.split("-"), Belt_Int.fromString);
  if (x1.length !== 2) {
    return ;
  }
  var a = x1[0];
  if (a === undefined) {
    return ;
  }
  var b = x1[1];
  if (b !== undefined) {
    return [
            a,
            b
          ];
  }
  
}

function parsePassword(value) {
  if (value.length !== 3) {
    return ;
  }
  var contains = value[0];
  var letter = value[1];
  var password = value[2];
  return Belt_Option.map(convertContains(contains), (function (param) {
                return {
                        min: param[0],
                        max: param[1],
                        letter: letter,
                        password: password.split("")
                      };
              }));
}

function part1(v) {
  var letterCount = Belt_Array.keep(v.password, (function (x) {
          return x === v.letter;
        })).length;
  if (v.min <= letterCount) {
    return v.max >= letterCount;
  } else {
    return false;
  }
}

function part2(v) {
  var count = Belt_Array.keep(Belt_Array.keepWithIndex(v.password, (function (_v, i) {
              if (i === (v.min - 1 | 0)) {
                return true;
              } else {
                return i === (v.max - 1 | 0);
              }
            })), (function (x) {
          return x === v.letter;
        })).length;
  return count === 1;
}

function f(part) {
  return Belt_Array.keep(Belt_Array.keepMap(strToArray(input), parsePassword), part).length;
}

console.log(f(part1));

console.log(f(part2));

exports.input = input;
exports.strToArray = strToArray;
exports.convertContains = convertContains;
exports.parsePassword = parsePassword;
exports.part1 = part1;
exports.part2 = part2;
exports.f = f;
/* input Not a pure module */
